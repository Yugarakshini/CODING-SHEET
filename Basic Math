##Link to coding sheet
https://docs.google.com/spreadsheets/d/1P3RXgZju_2OzZyJaRtu6D3Kx-Eks38X09_zJ8aj2zy8/edit?gid=0#gid=0

##1.Odd or Even
1.1. Using modulus operator
class Solution {
    static String oddEven(int n) {
        // code here
        if(n%2==0){
            return "even";
        }else{
            return "odd";
        }
    }
}
1.2. Using bitwise and operator (mind the inner parenthesis)
class Solution {
    static String oddEven(int n) {
        // code here
        if((n&1)==0){
            return "even";
        }else{
            return "odd";
        }
    }
}

##2.Find last digit of a^b for BIgInteger
class Solution {
    static int getLastDigit(String a, String b) {
        // code here
        return new BigInteger(a).modPow(new BigInteger(b),BigInteger.TEN).intValue();
    }
};

##3.Find nod
insert link : https://www.geeksforgeeks.org/find-first-last-digits-number/

##4.Find reverse of a number
4.1class Solution
{
    public long reverse_digit(long n)
    {
        long rev = 0,nod;
        long num = n;
        while(num!=0)
        {
            nod = num%10;
            rev = rev*10 + nod;
            num/=10;
        }
        return rev;
    }
}

4.2.using recursion:
class Solution{
    public long reverse_digit(long num,int count)
    {
        if(num == 0)
        {
            return result;
        }
        result = 0;
        result = (result * 10) + (num%10);
        num/=10;
    }

5.reverse of an array:
##4 ways: 
5.1.creating a temporary array
class Main{
    public static void main(String[] args){
        int[] nums = new int[]{1,2,3,4,5};
        int n = nums.length;
        int[] temp = new int[n];
        for(int i=0;i<n;i++)
        {
            temp[i] = nums[n-i-1];
        }
        for(int i=0;i<5;i++)
        {
            System.out.print(temp[i]+" ");
        }
    }
}

5.2.using two pointers
class GfG {
    
    // function to reverse an array
    static void reverseArray(int[] arr) {
        
        // Initialize left to the beginning and right to the end
        int left = 0, right = arr.length - 1;

        // Iterate till left is less than right
        while (left < right) {
            
            // Swap the elements at left and right position
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;

            // Increment the left pointer
            left++;

            // Decrement the right pointer
            right--;
        }
    }

    public static void main(String[] args) {
        int[] arr = { 1, 2, 3, 4, 5, 6 };

        reverseArray(arr);

        for (int i = 0; i < arr.length; i++) 
            System.out.print(arr[i] + " ");
    }
}

5.3.using swapping but iterating only through half of array
class Main {
    
    // function to reverse an array
    static void reverseArray(int[] arr) {
        int n = arr.length;
        for(int i=0;i<n/2;i++){
            int temp = arr[i];
            arr[i]=arr[n-i-1];
            arr[n-i-1]=temp;
        }
        }
    

    public static void main(String[] args) {
        int[] arr = { 1,2,3,4,5,6 };

        reverseArray(arr);

        for (int i = 0; i < arr.length; i++){
            System.out.print(arr[i] + " ");
    }
}
}

5.4.Recursive function using left and right pointer
import java.util.Arrays;

class Main{
    
    // recursive function to reverse an array from l to r
    static void reverseArrayRec(int[] arr, int l, int r) {
        if (l >= r)
            return;
  
        // Swap the elements at the ends
        int temp = arr[l];
        arr[l] = arr[r];
        arr[r] = temp;
  
        // Recur for the remaining array
        reverseArrayRec(arr, l + 1, r - 1);
    }

    //MAIN FUNCTION
    public static void main(String[] args) {
        int[] arr = { 1, 2,3,4,5,6};
        int n = arr.length;
        reverseArrayRec(arr,0,n-1);
  
        for (int i = 0; i < arr.length; i++) 
            System.out.print(arr[i] + " ");
    }
}

##Sum of first digit and last digit
class Solution
{
    public int corner_digitSum(int n)
    {
        
        return((n<10) ? n:(n%10)+Integer.parseInt(Integer.toString(n).substring(0,1)));
    }
}

public static int firstDigit(int n) 
    { 
        // Remove last digit from number 
        // till only one digit is left 
        while (n >= 10)  
            n /= 10; 
      
        // return the first digit 
        return n; 
    } 
  
    // Find the last digit 
    public static int lastdigit(int n) 
    { 
        // return the last digit 
        return (n % 10); 
    } 
